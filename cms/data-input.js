// üì• „Éá„Éº„ÇøÂèñËæº„ÉªÂá¶ÁêÜ Â∞ÇÁî®JavaScript v2.0

// ===== „É¢„Ç∏„É•„É©„Éº„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£ =====
const DataInputModule = (function() {
    'use strict';
    
    // ===== „Éó„É©„Ç§„Éô„Éº„ÉàÁä∂ÊÖã =====
    const _state = {
        currentSection: 'audio-video',
        uploadedFiles: new Map(),
        processingQueue: [],
        webMeetingConnections: new Map([
            ['zoom', { connected: true, lastSync: '2024-12-19 14:30', config: {} }],
            ['teams', { connected: false, lastSync: null, config: {} }],
            ['googleMeet', { connected: false, lastSync: null, config: {} }]
        ]),
        processingStats: {
            totalProcessed: 0,
            successCount: 0,
            errorCount: 0,
            averageProcessingTime: 0
        }
    };
    
    const _config = {
        maxFileSize: 50 * 1024 * 1024, // 50MB
        allowedFileTypes: ['.pdf', '.docx', '.xlsx', '.pptx', '.mp4', '.mp3', '.wav'],
        maxConcurrentUploads: 3,
        chunkSize: 1024 * 1024, // 1MB chunks
        retryAttempts: 3,
        processingTimeout: 300000 // 5ÂàÜ
    };
    
    // ===== ‰æùÂ≠òÊÄßÊ≥®ÂÖ• =====
    let logger, eventBus, securityValidator, performanceMonitor;
    
    // ===== „Çπ„Éà„É©„ÉÜ„Ç∏„Éº„Éë„Çø„Éº„É≥ - „Éï„Ç°„Ç§„É´Âá¶ÁêÜ =====
    const ProcessingStrategies = {
        'audio': {
            validate: (file) => ['.mp3', '.wav', '.m4a'].some(ext => file.name.toLowerCase().endsWith(ext)),
            process: async (file) => {
                logger.info('Èü≥Â£∞„Éï„Ç°„Ç§„É´Âá¶ÁêÜÈñãÂßã', { filename: file.name });
                const result = await simulateAudioProcessing(file);
                eventBus.emit('file:audio:processed', { file, result });
                return result;
            },
            preview: (file) => generateAudioPreview(file)
        },
        
        'video': {
            validate: (file) => ['.mp4', '.avi', '.mov'].some(ext => file.name.toLowerCase().endsWith(ext)),
            process: async (file) => {
                logger.info('ÂãïÁîª„Éï„Ç°„Ç§„É´Âá¶ÁêÜÈñãÂßã', { filename: file.name });
                const result = await simulateVideoProcessing(file);
                eventBus.emit('file:video:processed', { file, result });
                return result;
            },
            preview: (file) => generateVideoPreview(file)
        },
        
        'document': {
            validate: (file) => ['.pdf', '.docx', '.xlsx', '.pptx'].some(ext => file.name.toLowerCase().endsWith(ext)),
            process: async (file) => {
                logger.info('ÊñáÊõ∏„Éï„Ç°„Ç§„É´Âá¶ÁêÜÈñãÂßã', { filename: file.name });
                const result = await simulateDocumentProcessing(file);
                eventBus.emit('file:document:processed', { file, result });
                return result;
            },
            preview: (file) => generateDocumentPreview(file)
        },
        
        'default': {
            validate: () => true,
            process: async (file) => {
                logger.warn('Êú™Áü•„ÅÆ„Éï„Ç°„Ç§„É´ÂΩ¢Âºè', { filename: file.name, type: file.type });
                return { status: 'unsupported', message: '„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Éï„Ç°„Ç§„É´ÂΩ¢Âºè„Åß„Åô' };
            },
            preview: (file) => generateGenericPreview(file)
        }
    };
    
    // ===== „Éê„ÉÉ„ÉÅÂá¶ÁêÜ„Ç∑„Çπ„ÉÜ„É† =====
    class BatchProcessor {
        constructor(options = {}) {
            this.batchSize = options.batchSize || 10;
            this.queue = [];
            this.processing = false;
            this.concurrentLimit = options.concurrentLimit || 3;
            this.activeProcesses = new Set();
        }
        
        add(operation) {
            this.queue.push(operation);
            this.scheduleProcessing();
        }
        
        async scheduleProcessing() {
            if (this.processing || this.activeProcesses.size >= this.concurrentLimit) {
                return;
            }
            
            this.processing = true;
            
            while (this.queue.length > 0 && this.activeProcesses.size < this.concurrentLimit) {
                const batch = this.queue.splice(0, this.batchSize);
                this.processBatch(batch);
            }
            
            this.processing = false;
        }
        
        async processBatch(batch) {
            const processId = Date.now() + Math.random();
            this.activeProcesses.add(processId);
            
            try {
                await Promise.all(
                    batch.map(operation => this.executeOperation(operation))
                );
            } catch (error) {
                logger.error('„Éê„ÉÉ„ÉÅÂá¶ÁêÜ„Ç®„É©„Éº', { error: error.message });
            } finally {
                this.activeProcesses.delete(processId);
                
                if (this.queue.length > 0) {
                    this.scheduleProcessing();
                }
            }
        }
        
        async executeOperation(operation) {
            try {
                await operation();
            } catch (error) {
                logger.error('Âá¶ÁêÜ„Ç®„É©„Éº', { error: error.message });
            }
        }
    }
    
    // ===== „Çª„Ç≠„É•„É™„ÉÜ„Ç£Âº∑Âåñ„Éï„Ç°„Ç§„É´„Éê„É™„Éá„Éº„Çø„Éº =====
    class EnhancedFileValidator {
        static validateFile(file) {
            // Âü∫Êú¨„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
            securityValidator.validateInput(file.name, 'filename');
            
            // „Çµ„Ç§„Ç∫„ÉÅ„Çß„ÉÉ„ÇØ
            if (file.size > _config.maxFileSize) {
                throw new Error(`„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„Åå‰∏äÈôê„ÇíË∂Ö„Åà„Å¶„ÅÑ„Åæ„Åô: ${formatFileSize(file.size)}`);
            }
            
            // Êã°ÂºµÂ≠ê„ÉÅ„Çß„ÉÉ„ÇØ
            const extension = '.' + file.name.split('.').pop().toLowerCase();
            if (!_config.allowedFileTypes.includes(extension)) {
                throw new Error(`Ë®±ÂèØ„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Éï„Ç°„Ç§„É´ÂΩ¢Âºè„Åß„Åô: ${extension}`);
            }
            
            // MIME„Çø„Ç§„Éó„ÉÅ„Çß„ÉÉ„ÇØ
            this.validateMimeType(file);
            
            // „Éï„Ç°„Ç§„É´Âêç„ÅÆ„Çµ„Éã„Çø„Ç§„Ç∫
            return this.sanitizeFileName(file.name);
        }
        
        static validateMimeType(file) {
            const allowedMimeTypes = {
                '.pdf': 'application/pdf',
                '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                '.mp4': 'video/mp4',
                '.mp3': 'audio/mpeg'
            };
            
            const extension = '.' + file.name.split('.').pop().toLowerCase();
            const expectedMimeType = allowedMimeTypes[extension];
            
            if (expectedMimeType && file.type !== expectedMimeType) {
                logger.warn('MIME„Çø„Ç§„Éó‰∏ç‰∏ÄËá¥', {
                    filename: file.name,
                    expected: expectedMimeType,
                    actual: file.type
                });
            }
        }
        
        static sanitizeFileName(filename) {
            return filename.replace(/[^a-zA-Z0-9._-]/g, '_');
        }
    }
    
    // ===== „ÉÅ„É£„É≥„ÇØÂåñ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç∑„Çπ„ÉÜ„É† =====
    class ChunkedUploader {
        constructor(file, options = {}) {
            this.file = file;
            this.chunkSize = options.chunkSize || _config.chunkSize;
            this.totalChunks = Math.ceil(file.size / this.chunkSize);
            this.uploadedChunks = new Set();
            this.abortController = new AbortController();
        }
        
        async upload(onProgress) {
            const timer = performanceMonitor?.time(`upload:${this.file.name}`);
            
            try {
                logger.info('„ÉÅ„É£„É≥„ÇØÂåñ„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÈñãÂßã', {
                    filename: this.file.name,
                    totalChunks: this.totalChunks,
                    chunkSize: this.chunkSize
                });
                
                for (let chunkIndex = 0; chunkIndex < this.totalChunks; chunkIndex++) {
                    if (this.abortController.signal.aborted) {
                        throw new Error('„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åå„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü');
                    }
                    
                    await this.uploadChunk(chunkIndex);
                    
                    const progress = ((chunkIndex + 1) / this.totalChunks) * 100;
                    onProgress?.(progress);
                }
                
                const result = await this.finalizeUpload();
                timer?.end();
                
                logger.info('„ÉÅ„É£„É≥„ÇØÂåñ„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫Ü', {
                    filename: this.file.name,
                    uploadId: result.uploadId
                });
                
                return result;
                
            } catch (error) {
                timer?.end();
                logger.error('„ÉÅ„É£„É≥„ÇØÂåñ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº', {
                    filename: this.file.name,
                    error: error.message
                });
                throw error;
            }
        }
        
        async uploadChunk(chunkIndex) {
            const start = chunkIndex * this.chunkSize;
            const end = Math.min(start + this.chunkSize, this.file.size);
            const chunk = this.file.slice(start, end);
            
            const formData = new FormData();
            formData.append('chunk', chunk);
            formData.append('chunkIndex', chunkIndex);
            formData.append('totalChunks', this.totalChunks);
            formData.append('filename', this.file.name);
            
            const response = await fetch('/api/upload/chunk', {
                method: 'POST',
                body: formData,
                signal: this.abortController.signal
            });
            
            if (!response.ok) {
                throw new Error(`„ÉÅ„É£„É≥„ÇØ${chunkIndex}„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü`);
            }
            
            this.uploadedChunks.add(chunkIndex);
        }
        
        async finalizeUpload() {
            const response = await fetch('/api/upload/finalize', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    filename: this.file.name,
                    totalChunks: this.totalChunks,
                    uploadedChunks: Array.from(this.uploadedChunks)
                }),
                signal: this.abortController.signal
            });
            
            if (!response.ok) {
                throw new Error('„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÅÆÂÆå‰∫ÜÂá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
            
            return await response.json();
        }
        
        abort() {
            this.abortController.abort();
            logger.info('„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Çí„Ç≠„É£„É≥„Çª„É´', { filename: this.file.name });
        }
    }

// ===== „Éá„Éº„ÇøÂèñËæºÂàùÊúüÂåñ =====
function initializeDataInput() {
    // ÁèæÂú®„ÅÆÂá¶ÁêÜÁä∂Ê≥Å„ÇíÊõ¥Êñ∞
    updateProcessingStats();
    
    // ÂÆöÊúüÁöÑ„Å™Áä∂Ê≥ÅÊõ¥Êñ∞Ôºà30Áßí„Åî„Å®Ôºâ
    setInterval(updateProcessingStats, 30000);
    
    // „É™„Ç¢„É´„Çø„Ç§„É†Âá¶ÁêÜÁä∂Ê≥ÅÊõ¥Êñ∞Ôºà5Áßí„Åî„Å®Ôºâ
    setInterval(updateProgressBars, 5000);
}

// ===== „Çª„ÇØ„Ç∑„Éß„É≥„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥ =====
function initializeSectionNavigation() {
    const sectionButtons = document.querySelectorAll('.section-btn');
    
    sectionButtons.forEach(button => {
        button.addEventListener('click', function() {
            const section = this.getAttribute('data-section');
            switchSection(section);
        });
    });
}

function switchSection(section) {
    // „Éú„Çø„É≥„ÅÆÁä∂ÊÖãÊõ¥Êñ∞
    document.querySelectorAll('.section-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[data-section="${section}"]`).classList.add('active');
    
    // „Çª„ÇØ„Ç∑„Éß„É≥„ÅÆË°®Á§∫Âàá„ÇäÊõø„Åà
    document.querySelectorAll('.input-section').forEach(sec => {
        sec.style.display = 'none';
    });
    document.getElementById(`${section}-section`).style.display = 'block';
    
    currentSection = section;
    
    // „Çª„ÇØ„Ç∑„Éß„É≥Âà•„ÅÆÂàùÊúüÂåñÂá¶ÁêÜ
    switch(section) {
        case 'audio-video':
            loadAudioVideoFiles();
            break;
        case 'web-meeting':
            loadMeetingHistory();
            break;
        case 'email':
            loadEmailAnalytics();
            break;
        case 'documents':
            loadDocumentList();
            break;
    }
    
    showNotification(`${getSectionName(section)}„Å´Âàá„ÇäÊõø„Åà„Åæ„Åó„Åü`, 'info');
}

function getSectionName(section) {
    const names = {
        'audio-video': 'Èü≥Â£∞„ÉªÂãïÁîª„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ',
        'web-meeting': 'Web‰ºöË≠∞ÈÄ£Êê∫',
        'email': '„É°„Éº„É´ÁÆ°ÁêÜ',
        'documents': 'Ê±∫ÁÆóË≥áÊñôÁÆ°ÁêÜ'
    };
    return names[section] || section;
}

// ===== „Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÊ©üËÉΩ =====
function initializeFileUpload() {
    // Èü≥Â£∞„ÉªÂãïÁîª„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
    const audioVideoInput = document.getElementById('audioVideoInput');
    const documentInput = document.getElementById('documentInput');
    
    if (audioVideoInput) {
        audioVideoInput.addEventListener('change', function(e) {
            handleFileSelection(e.target.files, 'audio-video');
        });
    }
    
    if (documentInput) {
        documentInput.addEventListener('change', function(e) {
            handleFileSelection(e.target.files, 'document');
        });
    }
}

function handleFileSelection(files, type) {
    Array.from(files).forEach(file => {
        if (validateFile(file, type)) {
            uploadFile(file, type);
        } else {
            showNotification(`‚ùå „Éï„Ç°„Ç§„É´ "${file.name}" „ÅØÂØæÂøú„Åó„Å¶„ÅÑ„Å™„ÅÑÂΩ¢Âºè„Åß„Åô`, 'error');
        }
    });
}

function validateFile(file, type) {
    const audioVideoTypes = ['audio/mp3', 'audio/wav', 'audio/m4a', 'video/mp4', 'video/mov', 'video/avi'];
    const documentTypes = ['application/pdf', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 
                          'application/vnd.openxmlformats-officedocument.presentationml.presentation'];
    
    const maxSizes = {
        'audio-video': 500 * 1024 * 1024, // 500MB
        'document': 100 * 1024 * 1024      // 100MB
    };
    
    const allowedTypes = type === 'audio-video' ? audioVideoTypes : documentTypes;
    
    if (!allowedTypes.includes(file.type)) {
        return false;
    }
    
    if (file.size > maxSizes[type]) {
        showNotification(`‚ùå „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„Åå‰∏äÈôêÔºà${Math.round(maxSizes[type] / 1024 / 1024)}MBÔºâ„ÇíË∂Ö„Åà„Å¶„ÅÑ„Åæ„Åô`, 'error');
        return false;
    }
    
    return true;
}

function uploadFile(file, type) {
    const fileId = generateFileId();
    const fileInfo = {
        id: fileId,
        name: file.name,
        size: file.size,
        type: type,
        status: 'uploading',
        progress: 0,
        startTime: new Date(),
        file: file
    };
    
    uploadedFiles.set(fileId, fileInfo);
    addFileToUI(fileInfo);
    
    // „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂá¶ÁêÜ„Çí„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
    simulateFileUpload(fileId);
}

function simulateFileUpload(fileId) {
    const fileInfo = uploadedFiles.get(fileId);
    if (!fileInfo) return;
    
    const uploadInterval = setInterval(() => {
        fileInfo.progress += Math.random() * 15 + 5; // 5-20%„ÅÆÈÄ≤Êçó
        
        if (fileInfo.progress >= 100) {
            fileInfo.progress = 100;
            fileInfo.status = 'processing';
            clearInterval(uploadInterval);
            
            updateFileInUI(fileInfo);
            showNotification(`‚úÖ "${fileInfo.name}" „ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü`, 'success');
            
            // Âá¶ÁêÜÈñãÂßã
            setTimeout(() => startFileProcessing(fileId), 1000);
        } else {
            updateFileInUI(fileInfo);
        }
    }, 1000);
}

function startFileProcessing(fileId) {
    const fileInfo = uploadedFiles.get(fileId);
    if (!fileInfo) return;
    
    fileInfo.status = 'processing';
    fileInfo.progress = 0;
    processingQueue.push(fileId);
    
    showNotification(`üîÑ "${fileInfo.name}" „ÅÆÂá¶ÁêÜ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü`, 'info');
    
    // Âá¶ÁêÜ„Çí„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
    simulateFileProcessing(fileId);
}

function simulateFileProcessing(fileId) {
    const fileInfo = uploadedFiles.get(fileId);
    if (!fileInfo) return;
    
    const processingSteps = [
        'Èü≥Â£∞Ë™çË≠ò‰∏≠...',
        'Ë©±ËÄÖË≠òÂà•‰∏≠...',
        '„Éà„Éî„ÉÉ„ÇØÊäΩÂá∫‰∏≠...',
        'FAQÂÄôË£úÁîüÊàê‰∏≠...',
        'ÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠...'
    ];
    
    let stepIndex = 0;
    
    const processingInterval = setInterval(() => {
        fileInfo.progress += Math.random() * 10 + 5; // 5-15%„ÅÆÈÄ≤Êçó
        
        if (stepIndex < processingSteps.length && fileInfo.progress > (stepIndex + 1) * 20) {
            fileInfo.currentStep = processingSteps[stepIndex];
            stepIndex++;
        }
        
        if (fileInfo.progress >= 100) {
            fileInfo.progress = 100;
            fileInfo.status = 'completed';
            fileInfo.currentStep = 'Âá¶ÁêÜÂÆå‰∫Ü';
            fileInfo.results = generateProcessingResults(fileInfo);
            
            clearInterval(processingInterval);
            processingQueue = processingQueue.filter(id => id !== fileId);
            
            updateFileInUI(fileInfo);
            showNotification(`üéâ "${fileInfo.name}" „ÅÆÂá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü`, 'success');
        } else {
            updateFileInUI(fileInfo);
        }
    }, 2000);
}

function generateProcessingResults(fileInfo) {
    if (fileInfo.type === 'audio-video') {
        return {
            transcription: 'ÊñáÂ≠óËµ∑„Åì„ÅóÂÆå‰∫Ü',
            topics: Math.floor(Math.random() * 20) + 10,
            questions: Math.floor(Math.random() * 30) + 15,
            speakers: Math.floor(Math.random() * 5) + 2
        };
    } else if (fileInfo.type === 'document') {
        return {
            dataPoints: Math.floor(Math.random() * 50) + 30,
            faqCandidates: Math.floor(Math.random() * 15) + 8,
            charts: Math.floor(Math.random() * 10) + 3
        };
    }
    return {};
}

// ===== „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„ÉóÊ©üËÉΩ =====
function initializeDragAndDrop() {
    const uploadAreas = document.querySelectorAll('.upload-area');
    
    uploadAreas.forEach(area => {
        area.addEventListener('dragover', handleDragOver);
        area.addEventListener('dragleave', handleDragLeave);
        area.addEventListener('drop', handleDrop);
    });
}

function handleDragOver(e) {
    e.preventDefault();
    e.currentTarget.classList.add('dragover');
}

function handleDragLeave(e) {
    e.preventDefault();
    e.currentTarget.classList.remove('dragover');
}

function handleDrop(e) {
    e.preventDefault();
    e.currentTarget.classList.remove('dragover');
    
    const files = e.dataTransfer.files;
    const uploadType = e.currentTarget.id === 'audioVideoUploadArea' ? 'audio-video' : 'document';
    
    handleFileSelection(files, uploadType);
}

// ===== UIÊõ¥Êñ∞Ê©üËÉΩ =====
function addFileToUI(fileInfo) {
    const filesList = fileInfo.type === 'audio-video' ? 
        document.getElementById('audioVideoFilesList') : 
        document.querySelector('.documents-table');
    
    if (!filesList) return;
    
    const fileElement = createFileElement(fileInfo);
    filesList.appendChild(fileElement);
}

function createFileElement(fileInfo) {
    const fileDiv = document.createElement('div');
    fileDiv.className = `file-item ${fileInfo.status}`;
    fileDiv.id = `file-${fileInfo.id}`;
    
    const icon = getFileIcon(fileInfo.name);
    const size = formatFileSize(fileInfo.size);
    
    fileDiv.innerHTML = `
        <div class="file-icon">${icon}</div>
        <div class="file-info">
            <div class="file-name">${fileInfo.name}</div>
            <div class="file-details">
                <span class="file-size">${size}</span>
                <span class="file-status ${fileInfo.status}">${getStatusText(fileInfo)}</span>
            </div>
            <div class="processing-progress" style="display: ${fileInfo.status === 'processing' ? 'block' : 'none'}">
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${fileInfo.progress}%"></div>
                </div>
            </div>
            <div class="processing-results" style="display: ${fileInfo.status === 'completed' ? 'block' : 'none'}">
                ${generateResultsHTML(fileInfo)}
            </div>
        </div>
        <div class="file-actions">
            ${generateActionsHTML(fileInfo)}
        </div>
    `;
    
    return fileDiv;
}

function updateFileInUI(fileInfo) {
    const fileElement = document.getElementById(`file-${fileInfo.id}`);
    if (!fileElement) return;
    
    fileElement.className = `file-item ${fileInfo.status}`;
    
    const statusElement = fileElement.querySelector('.file-status');
    if (statusElement) {
        statusElement.textContent = getStatusText(fileInfo);
        statusElement.className = `file-status ${fileInfo.status}`;
    }
    
    const progressFill = fileElement.querySelector('.progress-fill');
    if (progressFill) {
        progressFill.style.width = `${fileInfo.progress}%`;
    }
    
    const progressContainer = fileElement.querySelector('.processing-progress');
    if (progressContainer) {
        progressContainer.style.display = fileInfo.status === 'processing' ? 'block' : 'none';
    }
    
    const resultsContainer = fileElement.querySelector('.processing-results');
    if (resultsContainer) {
        resultsContainer.style.display = fileInfo.status === 'completed' ? 'block' : 'none';
        if (fileInfo.status === 'completed') {
            resultsContainer.innerHTML = generateResultsHTML(fileInfo);
        }
    }
    
    const actionsContainer = fileElement.querySelector('.file-actions');
    if (actionsContainer) {
        actionsContainer.innerHTML = generateActionsHTML(fileInfo);
    }
}

function getFileIcon(filename) {
    const ext = filename.split('.').pop().toLowerCase();
    const iconMap = {
        mp3: 'üéµ', wav: 'üéµ', m4a: 'üéµ',
        mp4: 'üé•', mov: 'üé•', avi: 'üé•',
        pdf: 'üìÑ', xlsx: 'üìä', pptx: 'üìä', docx: 'üìù'
    };
    return iconMap[ext] || 'üìÅ';
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
}

function getStatusText(fileInfo) {
    switch(fileInfo.status) {
        case 'uploading':
            return `„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠... ${Math.round(fileInfo.progress)}%`;
        case 'processing':
            return fileInfo.currentStep || `Âá¶ÁêÜ‰∏≠... ${Math.round(fileInfo.progress)}%`;
        case 'completed':
            return 'Âá¶ÁêÜÂÆå‰∫Ü';
        case 'error':
            return '„Ç®„É©„Éº';
        default:
            return 'ÂæÖÊ©ü‰∏≠';
    }
}

function generateResultsHTML(fileInfo) {
    if (!fileInfo.results) return '';
    
    if (fileInfo.type === 'audio-video') {
        return `
            <span class="result-item">üìù ${fileInfo.results.transcription}</span>
            <span class="result-item">üè∑Ô∏è ${fileInfo.results.topics}ÂÄã„ÅÆ„Éà„Éî„ÉÉ„ÇØÊäΩÂá∫</span>
            <span class="result-item">‚ùì ${fileInfo.results.questions}ÂÄã„ÅÆË≥™ÂïèÊ§úÂá∫</span>
        `;
    } else if (fileInfo.type === 'document') {
        return `
            <span class="result-item">üìà Êï∞ÂÄ§ÊäΩÂá∫: ${fileInfo.results.dataPoints}È†ÖÁõÆ</span>
            <span class="result-item">üìù FAQÂÄôË£ú: ${fileInfo.results.faqCandidates}‰ª∂</span>
        `;
    }
    return '';
}

function generateActionsHTML(fileInfo) {
    switch(fileInfo.status) {
        case 'processing':
            return `
                <button class="btn-secondary" onclick="pauseProcessing('${fileInfo.id}')">
                    ‚è∏Ô∏è ‰∏ÄÊôÇÂÅúÊ≠¢
                </button>
            `;
        case 'completed':
            return `
                <button class="btn-primary" onclick="viewResults('${fileInfo.id}')">
                    üìä ÁµêÊûú„ÇíË°®Á§∫
                </button>
                <button class="btn-secondary" onclick="downloadTranscript('${fileInfo.id}')">
                    üìÑ „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
                </button>
            `;
        case 'error':
            return `
                <button class="btn-warning" onclick="retryProcessing('${fileInfo.id}')">
                    üîÑ ÂÜçË©¶Ë°å
                </button>
            `;
        default:
            return `
                <button class="btn-secondary" onclick="removeFile('${fileInfo.id}')">
                    üóëÔ∏è ÂâäÈô§
                </button>
            `;
    }
}

// ===== „Éï„Ç°„Ç§„É´Êìç‰ΩúÊ©üËÉΩ =====
function pauseProcessing(fileId) {
    const fileInfo = uploadedFiles.get(fileId);
    if (fileInfo) {
        fileInfo.status = 'paused';
        updateFileInUI(fileInfo);
        showNotification(`‚è∏Ô∏è "${fileInfo.name}" „ÅÆÂá¶ÁêÜ„Çí‰∏ÄÊôÇÂÅúÊ≠¢„Åó„Åæ„Åó„Åü`, 'info');
    }
}

function retryProcessing(fileId) {
    const fileInfo = uploadedFiles.get(fileId);
    if (fileInfo) {
        fileInfo.status = 'processing';
        fileInfo.progress = 0;
        updateFileInUI(fileInfo);
        startFileProcessing(fileId);
    }
}

function removeFile(fileId) {
    const fileInfo = uploadedFiles.get(fileId);
    if (fileInfo) {
        uploadedFiles.delete(fileId);
        const fileElement = document.getElementById(`file-${fileId}`);
        if (fileElement) {
            fileElement.remove();
        }
        showNotification(`üóëÔ∏è "${fileInfo.name}" „ÇíÂâäÈô§„Åó„Åæ„Åó„Åü`, 'info');
    }
}

function viewResults(fileId) {
    const fileInfo = uploadedFiles.get(fileId);
    if (fileInfo && fileInfo.results) {
        showModal(
            `${fileInfo.name} - Âá¶ÁêÜÁµêÊûú`,
            generateDetailedResults(fileInfo),
            [
                {
                    label: 'FAQÁîüÊàê',
                    action: () => generateFAQFromFile(fileId),
                    type: 'primary'
                },
                {
                    label: 'Èñâ„Åò„Çã',
                    action: () => {},
                    type: 'secondary'
                }
            ]
        );
    }
}

function downloadTranscript(fileId) {
    const fileInfo = uploadedFiles.get(fileId);
    if (fileInfo) {
        // „ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂá¶ÁêÜ„ÅÆ„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
        showNotification(`üì• "${fileInfo.name}" „ÅÆÊñáÂ≠óËµ∑„Åì„Åó„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Å¶„ÅÑ„Åæ„Åô...`, 'info');
        setTimeout(() => {
            showNotification(`‚úÖ „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü`, 'success');
        }, 2000);
    }
}

function generateDetailedResults(fileInfo) {
    if (fileInfo.type === 'audio-video') {
        return `
            <div class="results-details">
                <h4>Èü≥Â£∞Ë™çË≠òÁµêÊûú</h4>
                <ul>
                    <li>ÊñáÂ≠óËµ∑„Åì„Åó: ÂÆå‰∫Ü (98.5%„ÅÆÁ≤æÂ∫¶)</li>
                    <li>Ë©±ËÄÖË≠òÂà•: ${fileInfo.results.speakers}Âêç„ÇíÊ§úÂá∫</li>
                    <li>ÊäΩÂá∫„Éà„Éî„ÉÉ„ÇØ: ${fileInfo.results.topics}‰ª∂</li>
                    <li>Ë≥™ÂïèÊ§úÂá∫: ${fileInfo.results.questions}‰ª∂</li>
                </ul>
                
                <h4>‰∏ªË¶Å„Éà„Éî„ÉÉ„ÇØ</h4>
                <ul>
                    <li>Q3Ê•≠Á∏æ„Å´„Å§„ÅÑ„Å¶ (Âá∫ÁèæÂõûÊï∞: 15Âõû)</li>
                    <li>ÂçäÂ∞é‰Ωì‰∫ãÊ•≠Êà¶Áï• (Âá∫ÁèæÂõûÊï∞: 12Âõû)</li>
                    <li>ESGÂèñ„ÇäÁµÑ„Åø (Âá∫ÁèæÂõûÊï∞: 8Âõû)</li>
                </ul>
            </div>
        `;
    } else if (fileInfo.type === 'document') {
        return `
            <div class="results-details">
                <h4>ÊñáÊõ∏Ëß£ÊûêÁµêÊûú</h4>
                <ul>
                    <li>Êï∞ÂÄ§„Éá„Éº„Çø: ${fileInfo.results.dataPoints}È†ÖÁõÆ„ÇíÊäΩÂá∫</li>
                    <li>FAQÂÄôË£ú: ${fileInfo.results.faqCandidates}‰ª∂„ÇíÁîüÊàê</li>
                    <li>„Ç∞„É©„Éï„ÉªÂõ≥Ë°®: ${fileInfo.results.charts}‰ª∂„ÇíÊ§úÂá∫</li>
                </ul>
                
                <h4>ÊäΩÂá∫„Åï„Çå„Åü‰∏ªË¶ÅÊï∞ÂÄ§</h4>
                <ul>
                    <li>Â£≤‰∏äÈ´ò: ÂâçÂπ¥ÂêåÊúüÊØî+12.5%</li>
                    <li>Âñ∂Ê•≠Âà©Áõä: ÂâçÂπ¥ÂêåÊúüÊØî+8.3%</li>
                    <li>ROE: 15.2%</li>
                </ul>
            </div>
        `;
    }
    return '<p>Ë©≥Á¥∞„Å™ÁµêÊûú„ÇíË°®Á§∫„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ</p>';
}

// ===== Web‰ºöË≠∞ÈÄ£Êê∫Ê©üËÉΩ =====
function initializeWebMeetingIntegration() {
    loadMeetingConnections();
}

function loadMeetingConnections() {
    // Êé•Á∂öÁä∂Ê≥Å„ÅÆË°®Á§∫Êõ¥Êñ∞
    updateConnectionStatus();
}

function updateConnectionStatus() {
    // ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØ„ÄÅÂêÑ„Çµ„Éº„Éì„Çπ„ÅÆAPIÁä∂Ê≥Å„ÇíÁ¢∫Ë™ç
    console.log('Web‰ºöË≠∞„Çµ„Éº„Éì„ÇπÊé•Á∂öÁä∂Ê≥Å„ÇíÊõ¥Êñ∞‰∏≠...');
}

function configureZoom() {
    showModal(
        'ZoomË®≠ÂÆö',
        `
        <div class="config-form">
            <div class="form-group">
                <label>API Key</label>
                <input type="text" placeholder="Zoom API Key" value="****">
            </div>
            <div class="form-group">
                <label>API Secret</label>
                <input type="password" placeholder="Zoom API Secret" value="****">
            </div>
            <div class="form-group">
                <label>Webhook URL</label>
                <input type="text" value="https://kagami.company.com/webhook/zoom">
            </div>
        </div>
        `,
        [
            {
                label: '‰øùÂ≠ò',
                action: () => saveZoomConfig(),
                type: 'primary'
            },
            {
                label: '„Ç≠„É£„É≥„Çª„É´',
                action: () => {},
                type: 'secondary'
            }
        ]
    );
}

function disconnectZoom() {
    showModal(
        'ZoomÊé•Á∂öËß£Èô§',
        'Zoom„Å®„ÅÆÈÄ£Êê∫„ÇíËß£Èô§„Åó„Åæ„Åô„ÅãÔºüËá™ÂãïÈå≤Áîª„ÉªÂá¶ÁêÜÊ©üËÉΩ„ÅåÂà©Áî®„Åß„Åç„Å™„Åè„Å™„Çä„Åæ„Åô„ÄÇ',
        [
            {
                label: 'Ëß£Èô§„Åô„Çã',
                action: () => {
                    webMeetingConnections.zoom.connected = false;
                    showNotification('Zoom„Å®„ÅÆÈÄ£Êê∫„ÇíËß£Èô§„Åó„Åæ„Åó„Åü', 'warning');
                    updateConnectionStatus();
                },
                type: 'danger'
            },
            {
                label: '„Ç≠„É£„É≥„Çª„É´',
                action: () => {},
                type: 'secondary'
            }
        ]
    );
}

function connectTeams() {
    showNotification('Microsoft Teams„Å®„ÅÆÈÄ£Êê∫„ÇíÈñãÂßã„Åó„Åæ„Åô...', 'info');
    
    // OAuthË™çË®º„Éï„É≠„Éº„ÅÆ„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
    setTimeout(() => {
        webMeetingConnections.teams.connected = true;
        webMeetingConnections.teams.lastSync = new Date().toLocaleString('ja-JP');
        showNotification('‚úÖ Microsoft Teams„Å®„ÅÆÈÄ£Êê∫„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü', 'success');
        updateConnectionStatus();
    }, 3000);
}

function connectGoogleMeet() {
    showNotification('Google Meet„Å®„ÅÆÈÄ£Êê∫„ÇíÈñãÂßã„Åó„Åæ„Åô...', 'info');
    
    // OAuthË™çË®º„Éï„É≠„Éº„ÅÆ„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
    setTimeout(() => {
        webMeetingConnections.googleMeet.connected = true;
        webMeetingConnections.googleMeet.lastSync = new Date().toLocaleString('ja-JP');
        showNotification('‚úÖ Google Meet„Å®„ÅÆÈÄ£Êê∫„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü', 'success');
        updateConnectionStatus();
    }, 3000);
}

function viewMeetingDetails(meetingId) {
    showNotification(`‰ºöË≠∞Ë©≥Á¥∞ÁîªÈù¢ (${meetingId}) „Å´ÁßªÂãï„Åó„Åæ„Åô`, 'info');
    // ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØË©≥Á¥∞ÁîªÈù¢„Å´ÈÅ∑Áßª
}

// ===== „É°„Éº„É´ÁÆ°ÁêÜÊ©üËÉΩ =====
function initializeEmailManagement() {
    loadEmailAccounts();
    loadClassificationRules();
}

function loadEmailAccounts() {
    console.log('„É°„Éº„É´„Ç¢„Ç´„Ç¶„É≥„ÉàÊÉÖÂ†±„ÇíË™≠„ÅøËæº„Åø‰∏≠...');
    // ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØ„ÄÅ„É°„Éº„É´„Çµ„Éº„Éê„Éº„Åã„Çâ„Ç¢„Ç´„Ç¶„É≥„ÉàÊÉÖÂ†±„ÇíÂèñÂæó
}

function loadClassificationRules() {
    console.log('„É°„Éº„É´ÂàÜÈ°û„É´„Éº„É´„ÇíË™≠„ÅøËæº„Åø‰∏≠...');
    // ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØ„ÄÅË®≠ÂÆö„Åï„Çå„Åü„É´„Éº„É´„ÇíÂèñÂæó
}

function configureEmail(accountId) {
    showModal(
        '„É°„Éº„É´„Ç¢„Ç´„Ç¶„É≥„ÉàË®≠ÂÆö',
        `
        <div class="config-form">
            <div class="form-group">
                <label>IMAP Server</label>
                <input type="text" value="imap.company.com">
            </div>
            <div class="form-group">
                <label>Port</label>
                <input type="number" value="993">
            </div>
            <div class="form-group">
                <label>SSL/TLS</label>
                <select>
                    <option value="tls" selected>TLS</option>
                    <option value="ssl">SSL</option>
                </select>
            </div>
            <div class="form-group">
                <label>ÂêåÊúüÈñìÈöî</label>
                <select>
                    <option value="1">1ÂàÜ</option>
                    <option value="5" selected>5ÂàÜ</option>
                    <option value="15">15ÂàÜ</option>
                </select>
            </div>
        </div>
        `,
        [
            {
                label: '‰øùÂ≠ò',
                action: () => showNotification('„É°„Éº„É´„Ç¢„Ç´„Ç¶„É≥„ÉàË®≠ÂÆö„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü', 'success'),
                type: 'primary'
            },
            {
                label: '„Ç≠„É£„É≥„Çª„É´',
                action: () => {},
                type: 'secondary'
            }
        ]
    );
}

function addEmailAccount() {
    showModal(
        'Êñ∞Ë¶è„É°„Éº„É´„Ç¢„Ç´„Ç¶„É≥„ÉàËøΩÂä†',
        `
        <div class="config-form">
            <div class="form-group">
                <label>„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ</label>
                <input type="email" placeholder="example@company.com">
            </div>
            <div class="form-group">
                <label>„Éë„Çπ„ÉØ„Éº„Éâ</label>
                <input type="password" placeholder="„Éë„Çπ„ÉØ„Éº„Éâ">
            </div>
            <div class="form-group">
                <label>Ë°®Á§∫Âêç</label>
                <input type="text" placeholder="„Ç¢„Ç´„Ç¶„É≥„ÉàÂêç">
            </div>
            <div class="form-group">
                <label>Ëá™ÂãïË®≠ÂÆö</label>
                <select>
                    <option value="auto" selected>Ëá™ÂãïÊ§úÂá∫</option>
                    <option value="manual">ÊâãÂãïË®≠ÂÆö</option>
                </select>
            </div>
        </div>
        `,
        [
            {
                label: 'ËøΩÂä†',
                action: () => showNotification('Êñ∞„Åó„ÅÑ„É°„Éº„É´„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü', 'success'),
                type: 'primary'
            },
            {
                label: '„Ç≠„É£„É≥„Çª„É´',
                action: () => {},
                type: 'secondary'
            }
        ]
    );
}

function editRule(ruleId) {
    showModal(
        'ÂàÜÈ°û„É´„Éº„É´Á∑®ÈõÜ',
        `
        <div class="config-form">
            <div class="form-group">
                <label>„É´„Éº„É´Âêç</label>
                <input type="text" value="Á∑äÊÄ•ÂØæÂøú">
            </div>
            <div class="form-group">
                <label>„Ç≠„Éº„ÉØ„Éº„Éâ</label>
                <input type="text" value="Á∑äÊÄ•, urgent, Ëá≥ÊÄ•, ASAP">
                <small>„Ç´„É≥„ÉûÂå∫Âàá„Çä„ÅßÂÖ•Âäõ</small>
            </div>
            <div class="form-group">
                <label>ÂÑ™ÂÖàÂ∫¶</label>
                <select>
                    <option value="high" selected>È´ò</option>
                    <option value="medium">‰∏≠</option>
                    <option value="low">‰Ωé</option>
                </select>
            </div>
            <div class="form-group">
                <label>Ëá™Âãï„Ç¢„ÇØ„Ç∑„Éß„É≥</label>
                <div class="checkbox-group">
                    <label><input type="checkbox" checked> Âç≥Â∫ß„Å´ÈÄöÁü•</label>
                    <label><input type="checkbox"> Ëá™ÂãïËª¢ÈÄÅ</label>
                    <label><input type="checkbox"> FAQ„ÉÅ„Çß„ÉÉ„ÇØ</label>
                </div>
            </div>
        </div>
        `,
        [
            {
                label: '‰øùÂ≠ò',
                action: () => showNotification('ÂàÜÈ°û„É´„Éº„É´„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü', 'success'),
                type: 'primary'
            },
            {
                label: '„Ç≠„É£„É≥„Çª„É´',
                action: () => {},
                type: 'secondary'
            }
        ]
    );
}

function createNewRule() {
    showModal(
        'Êñ∞Ë¶èÂàÜÈ°û„É´„Éº„É´‰ΩúÊàê',
        `
        <div class="config-form">
            <div class="form-group">
                <label>„É´„Éº„É´Âêç</label>
                <input type="text" placeholder="„É´„Éº„É´Âêç„ÇíÂÖ•Âäõ">
            </div>
            <div class="form-group">
                <label>„Ç≠„Éº„ÉØ„Éº„Éâ</label>
                <input type="text" placeholder="ÂàÜÈ°û„Ç≠„Éº„ÉØ„Éº„ÉâÔºà„Ç´„É≥„ÉûÂå∫Âàá„ÇäÔºâ">
            </div>
            <div class="form-group">
                <label>Êù°‰ª∂</label>
                <select>
                    <option value="any">„ÅÑ„Åö„Çå„Åã„ÅÆ„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÂê´„ÇÄ</option>
                    <option value="all">„Åô„Åπ„Å¶„ÅÆ„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÂê´„ÇÄ</option>
                    <option value="exact">ÂÆåÂÖ®‰∏ÄËá¥</option>
                </select>
            </div>
            <div class="form-group">
                <label>ÂØæË±°</label>
                <div class="checkbox-group">
                    <label><input type="checkbox" checked> ‰ª∂Âêç</label>
                    <label><input type="checkbox" checked> Êú¨Êñá</label>
                    <label><input type="checkbox"> ÈÄÅ‰ø°ËÄÖ</label>
                </div>
            </div>
        </div>
        `,
        [
            {
                label: '‰ΩúÊàê',
                action: () => showNotification('Êñ∞„Åó„ÅÑÂàÜÈ°û„É´„Éº„É´„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü', 'success'),
                type: 'primary'
            },
            {
                label: '„Ç≠„É£„É≥„Çª„É´',
                action: () => {},
                type: 'secondary'
            }
        ]
    );
}

function respondToEmail(emailId) {
    showNotification(`„É°„Éº„É´ÂõûÁ≠îÁîªÈù¢ (${emailId}) „Å´ÁßªÂãï„Åó„Åæ„Åô`, 'info');
    // ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØÂõûÁ≠îÁîªÈù¢„Å´ÈÅ∑Áßª
}

function viewEmailDetails(emailId) {
    showNotification(`„É°„Éº„É´Ë©≥Á¥∞ÁîªÈù¢ (${emailId}) „Å´ÁßªÂãï„Åó„Åæ„Åô`, 'info');
    // ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØË©≥Á¥∞ÁîªÈù¢„Å´ÈÅ∑Áßª
}

// ===== ÊñáÊõ∏ÁÆ°ÁêÜÊ©üËÉΩ =====
function initializeDocumentManagement() {
    loadDocumentList();
}

function loadDocumentList() {
    console.log('ÊñáÊõ∏‰∏ÄË¶ß„ÇíË™≠„ÅøËæº„Åø‰∏≠...');
    // ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØ„ÄÅÁôªÈå≤„Åï„Çå„ÅüÊñáÊõ∏‰∏ÄË¶ß„ÇíÂèñÂæó
}

function manualTdnetSync() {
    showNotification('üîÑ TDnet„Åã„ÇâÊúÄÊñ∞„ÅÆÈñãÁ§∫ÊÉÖÂ†±„ÇíÂèñÂæó‰∏≠...', 'info');
    
    // ÂêåÊúüÂá¶ÁêÜ„ÅÆ„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
    setTimeout(() => {
        showNotification('‚úÖ TDnetÂêåÊúü„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºàÊñ∞Ë¶èÂèñÂæó: 2‰ª∂Ôºâ', 'success');
    }, 3000);
}

function configureTdnet() {
    showModal(
        'TDnetË®≠ÂÆö',
        `
        <div class="config-form">
            <div class="form-group">
                <label>‰ºöÁ§æ„Ç≥„Éº„Éâ</label>
                <input type="text" placeholder="4Ê°Å„ÅÆ‰ºöÁ§æ„Ç≥„Éº„Éâ" value="1234">
            </div>
            <div class="form-group">
                <label>Ëá™ÂãïÂèñÂæóÈñìÈöî</label>
                <select>
                    <option value="15" selected>15ÂàÜ</option>
                    <option value="30">30ÂàÜ</option>
                    <option value="60">1ÊôÇÈñì</option>
                </select>
            </div>
            <div class="form-group">
                <label>ÂèñÂæóÂØæË±°</label>
                <div class="checkbox-group">
                    <label><input type="checkbox" checked> Ê±∫ÁÆóÁü≠‰ø°</label>
                    <label><input type="checkbox" checked> ÈÅ©ÊôÇÈñãÁ§∫</label>
                    <label><input type="checkbox"> IRË≥áÊñô</label>
                </div>
            </div>
        </div>
        `,
        [
            {
                label: '‰øùÂ≠ò',
                action: () => showNotification('TDnetË®≠ÂÆö„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü', 'success'),
                type: 'primary'
            },
            {
                label: '„Ç≠„É£„É≥„Çª„É´',
                action: () => {},
                type: 'secondary'
            }
        ]
    );
}

function filterDocuments() {
    const documentType = document.getElementById('documentType').value;
    const documentPeriod = document.getElementById('documentPeriod').value;
    
    showNotification(`„Éï„Ç£„É´„Çø„ÉºÈÅ©Áî®: Á®ÆÂà•=${documentType}, ÊúüÈñì=${documentPeriod}`, 'info');
    // ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØ„ÄÅ„Éï„Ç£„É´„Çø„ÉºÊù°‰ª∂„Å´Âü∫„Å•„ÅÑ„Å¶ÊñáÊõ∏‰∏ÄË¶ß„ÇíÊõ¥Êñ∞
}

function viewAnalysis(documentId) {
    showNotification(`ÊñáÊõ∏Ëß£ÊûêÁµêÊûúÁîªÈù¢ (${documentId}) „Å´ÁßªÂãï„Åó„Åæ„Åô`, 'info');
    // ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØËß£ÊûêÁµêÊûúÁîªÈù¢„Å´ÈÅ∑Áßª
}

function generateFAQ(documentId) {
    showNotification(`ÊñáÊõ∏ (${documentId}) „Åã„ÇâFAQ„ÇíÁîüÊàê‰∏≠...`, 'info');
    
    setTimeout(() => {
        showNotification('‚úÖ FAQÂÄôË£ú12‰ª∂„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü', 'success');
        setTimeout(() => {
            showModal(
                'FAQÁîüÊàêÂÆå‰∫Ü',
                'AI-FAQÁÆ°ÁêÜÁîªÈù¢„ÅßÁîüÊàê„Åï„Çå„ÅüFAQÂÄôË£ú„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åô„ÅãÔºü',
                [
                    {
                        label: 'FAQÁÆ°ÁêÜÁîªÈù¢„Å∏',
                        action: () => navigateTo('ai-faq.html'),
                        type: 'primary'
                    },
                    {
                        label: 'Âæå„ÅßÁ¢∫Ë™ç',
                        action: () => {},
                        type: 'secondary'
                    }
                ]
            );
        }, 1000);
    }, 3000);
}

function generateFAQFromFile(fileId) {
    const fileInfo = uploadedFiles.get(fileId);
    if (fileInfo) {
        showNotification(`"${fileInfo.name}" „Åã„ÇâFAQ„ÇíÁîüÊàê‰∏≠...`, 'info');
        setTimeout(() => {
            showNotification('‚úÖ FAQÂÄôË£ú8‰ª∂„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü', 'success');
        }, 2000);
    }
}

// ===== Âá¶ÁêÜÁä∂Ê≥ÅÊõ¥Êñ∞ =====
function updateProcessingStats() {
    // Âá¶ÁêÜÁä∂Ê≥Å„ÅÆÁµ±Ë®à„ÇíÊõ¥Êñ∞
    const audioProcessing = processingQueue.filter(id => {
        const file = uploadedFiles.get(id);
        return file && file.type === 'audio-video';
    }).length;
    
    const emailProcessing = Math.floor(Math.random() * 5) + 3; // „Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
    const documentProcessing = Math.floor(Math.random() * 3) + 1; // „Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
    
    // UIÊõ¥Êñ∞
    const statItems = document.querySelectorAll('.stat-item');
    if (statItems.length >= 3) {
        statItems[0].querySelector('.stat-value').textContent = audioProcessing;
        statItems[1].querySelector('.stat-value').textContent = emailProcessing;
        statItems[2].querySelector('.stat-value').textContent = documentProcessing;
    }
}

function updateProgressBars() {
    // ÈÄ≤Ë°å‰∏≠„ÅÆÂá¶ÁêÜ„ÅÆÈÄ≤Êçó„Éê„Éº„ÇíÊõ¥Êñ∞
    processingQueue.forEach(fileId => {
        const fileInfo = uploadedFiles.get(fileId);
        if (fileInfo && fileInfo.status === 'processing') {
            updateFileInUI(fileInfo);
        }
    });
}

// ===== „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞ =====
function generateFileId() {
    return 'file_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

function navigateTo(page) {
    window.location.href = page;
}

function logout() {
    if (confirm('„É≠„Ç∞„Ç¢„Ç¶„Éà„Åó„Åæ„Åô„ÅãÔºü')) {
        window.location.href = 'login.html';
    }
}

    // ===== „Éë„Éñ„É™„ÉÉ„ÇØ API =====
    return {
        // ÂàùÊúüÂåñ
        init: (dependencies) => {
            logger = dependencies.logger || console;
            eventBus = dependencies.eventBus || { emit: () => {}, on: () => {} };
            securityValidator = dependencies.securityValidator || {};
            performanceMonitor = dependencies.performanceMonitor;
            
            return init();
        },
        
        // Áä∂ÊÖã„Ç¢„ÇØ„Çª„Çπ
        get state() {
            return { ..._state };
        },
        
        get config() {
            return { ..._config };
        },
        
        // „Éï„Ç°„Ç§„É´Âá¶ÁêÜ
        uploadFile: uploadFile,
        processFile: processFile,
        
        // „Çª„ÇØ„Ç∑„Éß„É≥ÁÆ°ÁêÜ
        switchSection: switchSection,
        
        // Áµ±Ë®àÊÉÖÂ†±
        getProcessingStats: () => ({ ..._state.processingStats }),
        
        // Web‰ºöË≠∞ÈÄ£Êê∫
        connectWebMeetingService: connectWebMeetingService,
        
        // „Éá„Éê„ÉÉ„Ç∞Áî®
        _debug: {
            state: _state,
            config: _config
        }
    };
    
    // ===== ÂÜÖÈÉ®Èñ¢Êï∞ =====
    async function init() {
        try {
            logger.info('üì• „Éá„Éº„ÇøÂèñËæº„ÉªÂá¶ÁêÜ„Ç∑„Çπ„ÉÜ„É† v2.0 - Ëµ∑Âãï‰∏≠...');
            
            initializeSectionNavigation();
            initializeFileUpload();
            initializeDragAndDrop();
            initializeWebMeetingIntegration();
            
            logger.info('‚úÖ „Éá„Éº„ÇøÂèñËæº„ÉªÂá¶ÁêÜ„Ç∑„Çπ„ÉÜ„É† v2.0 - Ëµ∑ÂãïÂÆå‰∫Ü');
            
        } catch (error) {
            logger.error('„Éá„Éº„ÇøÂèñËæº„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ„Ç®„É©„Éº', { error: error.message });
            throw error;
        }
    }
    
    async function uploadFile(file) {
        try {
            // „Éï„Ç°„Ç§„É´„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
            const sanitizedName = EnhancedFileValidator.validateFile(file);
            
            // „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂá¶ÁêÜ
            const uploader = new ChunkedUploader(file);
            const result = await uploader.upload((progress) => {
                eventBus.emit('upload:progress', { filename: file.name, progress });
            });
            
            // Áä∂ÊÖãÊõ¥Êñ∞
            _state.uploadedFiles.set(result.fileId, {
                file: file,
                uploadId: result.uploadId,
                status: 'uploaded',
                uploadTime: new Date().toISOString()
            });
            
            eventBus.emit('file:uploaded', { file, result });
            
            return result;
            
        } catch (error) {
            logger.error('„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº', { filename: file.name, error: error.message });
            throw error;
        }
    }
    
    async function processFile(fileId) {
        const fileData = _state.uploadedFiles.get(fileId);
        if (!fileData) {
            throw new Error('„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
        }
        
        const file = fileData.file;
        const strategy = getProcessingStrategy(file);
        
        try {
            _state.uploadedFiles.set(fileId, {
                ...fileData,
                status: 'processing',
                processingStartTime: new Date().toISOString()
            });
            
            const result = await strategy.process(file);
            
            _state.uploadedFiles.set(fileId, {
                ...fileData,
                status: 'completed',
                result: result,
                processingEndTime: new Date().toISOString()
            });
            
            updateProcessingStats('success');
            
            return result;
            
        } catch (error) {
            _state.uploadedFiles.set(fileId, {
                ...fileData,
                status: 'error',
                error: error.message,
                processingEndTime: new Date().toISOString()
            });
            
            updateProcessingStats('error');
            throw error;
        }
    }
    
    function getProcessingStrategy(file) {
        for (const [type, strategy] of Object.entries(ProcessingStrategies)) {
            if (strategy.validate(file)) {
                return strategy;
            }
        }
        return ProcessingStrategies.default;
    }
    
    function updateProcessingStats(result) {
        _state.processingStats.totalProcessed++;
        if (result === 'success') {
            _state.processingStats.successCount++;
        } else if (result === 'error') {
            _state.processingStats.errorCount++;
        }
    }
    
    function switchSection(section) {
        _state.currentSection = section;
        eventBus.emit('section:changed', { section });
        logger.debug('„Çª„ÇØ„Ç∑„Éß„É≥Âàá„ÇäÊõø„Åà', { section });
    }
    
    function connectWebMeetingService(service, config) {
        _state.webMeetingConnections.set(service, {
            connected: true,
            lastSync: new Date().toISOString(),
            config: config
        });
        
        eventBus.emit('webmeeting:connected', { service, config });
        logger.info('Web‰ºöË≠∞„Çµ„Éº„Éì„ÇπÊé•Á∂ö', { service });
    }
    
    // ===== Êó¢Â≠òÈñ¢Êï∞„ÅÆ„É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞ =====
    function initializeSectionNavigation() {
        // „Çª„ÇØ„Ç∑„Éß„É≥„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„ÅÆÂàùÊúüÂåñ
    }
    
    function initializeFileUpload() {
        // „Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÅÆÂàùÊúüÂåñ
    }
    
    function initializeDragAndDrop() {
        // „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„ÅÆÂàùÊúüÂåñ
    }
    
    function initializeWebMeetingIntegration() {
        // Web‰ºöË≠∞ÈÄ£Êê∫„ÅÆÂàùÊúüÂåñ
    }
    
    // ===== „Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥Èñ¢Êï∞ =====
    async function simulateAudioProcessing(file) {
        await new Promise(resolve => setTimeout(resolve, 2000));
        return {
            type: 'audio',
            duration: '00:15:30',
            transcription: '„Çµ„É≥„Éó„É´Èü≥Â£∞Ëª¢ÂÜô„ÉÜ„Ç≠„Çπ„Éà...',
            highlights: ['ÈáçË¶Å„Å™„Éù„Ç§„É≥„Éà1', 'ÈáçË¶Å„Å™„Éù„Ç§„É≥„Éà2']
        };
    }
    
    async function simulateVideoProcessing(file) {
        await new Promise(resolve => setTimeout(resolve, 3000));
        return {
            type: 'video',
            duration: '00:25:45',
            thumbnails: ['thumb1.jpg', 'thumb2.jpg'],
            transcription: '„Çµ„É≥„Éó„É´ÂãïÁîªËª¢ÂÜô„ÉÜ„Ç≠„Çπ„Éà...'
        };
    }
    
    async function simulateDocumentProcessing(file) {
        await new Promise(resolve => setTimeout(resolve, 1500));
        return {
            type: 'document',
            pageCount: 25,
            extractedText: '„Çµ„É≥„Éó„É´ÊñáÊõ∏„ÉÜ„Ç≠„Çπ„Éà...',
            summary: 'ÊñáÊõ∏„ÅÆË¶ÅÁ¥Ñ...'
        };
    }
    
    function generateAudioPreview(file) {
        return `<div class="audio-preview">üéµ ${file.name}</div>`;
    }
    
    function generateVideoPreview(file) {
        return `<div class="video-preview">üé¨ ${file.name}</div>`;
    }
    
    function generateDocumentPreview(file) {
        return `<div class="document-preview">üìÑ ${file.name}</div>`;
    }
    
    function generateGenericPreview(file) {
        return `<div class="generic-preview">üìé ${file.name}</div>`;
    }
    
    function formatFileSize(bytes) {
        const units = ['B', 'KB', 'MB', 'GB'];
        let size = bytes;
        let unitIndex = 0;
        
        while (size >= 1024 && unitIndex < units.length - 1) {
            size /= 1024;
            unitIndex++;
        }
        
        return `${size.toFixed(1)} ${units[unitIndex]}`;
    }
    
})();

// ===== „É¢„Ç∏„É•„Éº„É´ÂàùÊúüÂåñ =====
document.addEventListener('DOMContentLoaded', function() {
    if (window.KAGAMI) {
        DataInputModule.init({
            logger: KAGAMI.logger,
            eventBus: KAGAMI.events,
            securityValidator: KAGAMI.validator,
            performanceMonitor: KAGAMI.getPerformanceReport ? KAGAMI : null
        });
    } else {
        console.warn('KAGAMI „Ç≥„Ç¢„É¢„Ç∏„É•„Éº„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
        DataInputModule.init({});
    }
});

// ===== „Ç∞„É≠„Éº„Éê„É´ÂÖ¨Èñã =====
window.DataInputModule = DataInputModule;

console.log('üì• „Éá„Éº„ÇøÂèñËæº„ÉªÂá¶ÁêÜJavaScript v2.0 - Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü'); 